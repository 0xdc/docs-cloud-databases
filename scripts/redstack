#!/usr/bin/env bash
###############################################################################
# RedStack, the Reddwarf Dev Machine Controller                               #
###############################################################################
#                                                                             #
# This script provides all the functionality to run all the steps from        #
# setting up the enviornment, resetting the nova database to running the      #
# test.                                                                       #
#                                                                             #
###############################################################################

# Bail on errors.
set -e

if [ ! -f /integration/scripts/redstack ]; then
    echo "This script is meant to run in a disposable dev environment. "
    echo "Run create_vm to create such a machine."
    exit 1
fi

# Load global configuration variables.
. /integration/scripts/redstack.rc
. /integration/scripts/reviews.rc

if [ -f $PATH_ENV_CONF ]; then
    source $PATH_ENV_CONF
fi

TEST_HOME="/integration/tests"

INTEGRATION_CONF="/tmp/integration"
TESTS_CONF="$INTEGRATION_CONF/tests.conf"



###############################################################################
# Utility functions
###############################################################################

APT_GET_ARGS="-y --allow-unauthenticated --force-yes"

exclaim () {
    echo "*******************************************************************************"
    echo "$@"
    echo "*******************************************************************************"
}

pkg_install () {
    echo Installing $@...
    sudo -E DEBIAN_FRONTEND=noninteractive $HTTP_PROXY apt-get $APT_GET_ARGS install $@
}

pkg_remove () {
    echo Uninstalling $@...
    sudo -E apt-get $APT_GET_ARGS remove $@
}

set_home_dir() {
    self="${0#./}"
    base="${self%/*}"
    current=`pwd`
    if [ "$base" = "$self" ] ; then
        HOME="$current/"
    elif [[ $base =~ ^/ ]]; then
        HOME="$base/"
    else
        HOME="$current/$base/"
    fi
}

set_http_proxy() {
    if [ ! "${http_proxy}" = '' ]; then
        HTTP_PROXY="http_proxy=$http_proxy https_proxy=$https_proxy"
    fi
}

function echo_id_from_table () {
    # Given a command that returns a table, prints only the id part.
    echo `$@ | grep id | awk '{print $4}'`
}

function configure_keystone() {
    exclaim "Configuring keystone..."
    
    # First we should check if these exist
    REDDWARF_TENANT=`keystone --endpoint http://localhost:35357/v2.0 --token be19c524ddc92109a224 tenant-list | grep reddwarf | awk '{print $2}'`
    if [ -z $REDDWARF_TENANT ]; then
        REDDWARF_TENANT=`echo_id_from_table keystone --endpoint http://localhost:35357/v2.0 --token be19c524ddc92109a224 tenant-create --name=reddwarf`
    fi
    
    REDDWARF_USER=`keystone --endpoint http://localhost:35357/v2.0 --token be19c524ddc92109a224 user-list | grep reddwarf | awk '{print $2}'`
    if [ -z $REDDWARF_USER ]; then
        REDDWARF_USER=`echo_id_from_table keystone --endpoint http://localhost:35357/v2.0 --token be19c524ddc92109a224 user-create \
                                                         --name=reddwarf --pass="REDDWARF-PASS" --email=reddwarf@example.com`
    fi
    REDDWARF_ROLE=`keystone --endpoint http://localhost:35357/v2.0 --token be19c524ddc92109a224 role-list | grep reddwarf | awk '{print $2}'`
    if [ -z "$REDDWARF_ROLE" ]; then
        REDDWARF_ROLE=`echo_id_from_table keystone --endpoint http://localhost:35357/v2.0 --token be19c524ddc92109a224 role-create --name=reddwarf`
    fi
    
    echo "
REDDWARF_TENANT=$REDDWARF_TENANT
REDDWARF_USER=$REDDWARF_USER
REDDWARF_ROLE=$REDDWARF_ROLE
" > $PATH_ENV_CONF

    echo "
# REDDWARF_TENANT=$REDDWARF_TENANT
# REDDWARF_USER=$REDDWARF_USER
# REDDWARF_ROLE=$REDDWARF_ROLE"
    keystone --endpoint http://localhost:35357/v2.0 \
        --token be19c524ddc92109a224 user-role-add \
        --tenant_id $REDDWARF_TENANT \
        --user $REDDWARF_USER \
        --role $REDDWARF_ROLE

    echo "Checking login..."
    # Now attempt a login
    curl -d '{"auth":{"passwordCredentials":{"username": "reddwarf", "password": "REDDWARF-PASS"},"tenantName":"reddwarf"}}' \
     -H "Content-type: application/json" http://localhost:35357/v2.0/tokens
}

###############################################################################


###############################################################################
# Install all the required dependencies
###############################################################################

install_packages_1() {
    # Called before devstack.
    exclaim 'Installing dependencies (part 1)...'
    pkg_install git-core
}

install_packages_2() {
    # Called after devstack.
    exclaim "Installing dependencies (part 2)..."
    # The default version of pip Ubuntu installs is old.
    cd /tmp
    sudo pip install --upgrade pip
    sudo pip install proboscis
}

install_devstack() {
    exclaim "Installing devstack..."
    # Installs devstack (if needed).
    if [ ! -d $PATH_DEVSTACK_SRC ]; then
        echo "DevStack not in a shared folder, cloning from git."
        mkdir -p $PATH_DEVSTACK_SRC
        git clone git://github.com/openstack-dev/devstack.git $PATH_DEVSTACK_SRC
    fi
}

install_devstack_code() {
    exclaim "Installing devstack projects..."
    # Ensures present user can get to the devstack dirs
    sudo mkdir -p $PATH_DEVSTACK_OUTPUT
    if [ ! -w $PATH_DEVSTACK_OUTPUT ]; then
        sudo chown `whoami` $PATH_DEVSTACK_OUTPUT
    fi
    # Clones all of the code to where devstack expects it to be
    cd $PATH_DEVSTACK_OUTPUT
    for project in glance horizon keystone nova python-keystoneclient python-novaclient python-quantumclient
    do
      if [ ! -d $project ]; then
          echo "Creating a new clone of $project..."
          git clone git://github.com/openstack/$project
      else
          echo "$project was already cloned or exists in a shared folder, ignoring..."
      fi
    done
}

install_reviews_on_top_of_devstack() {
    exclaim "Putting gerrit review code on top of the existing devstack code"
    run_review_for nova $PATH_NOVA $REVIEW_NOVA
    run_review_for python-novaclient $PATH_PYTHON_NOVACLIENT $REVIEW_PYTHON_NOVACLIENT
    run_review_for keystone $PATH_KEYSTONE $REVIEW_KEYSTONE
    run_review_for python-keystoneclient $PATH_KEYSTONECLIENT $REVIEW_PYTHON_KEYSTONECLIENT
    run_review_for glance $PATH_GLANCE $REVIEW_GLANCE
}

run_review_for() {
    # Splits based on colon in the REVIEW_ARG and pulls from
    GIT_NAME=$1
    PATH_ARG=$2
    REVIEW_ARG=$3
    for review in `echo $REVIEW_ARG| tr ":" "\n"`
    do
        # This should be the ref spec for what we pull
        pushd $PATH_ARG
        git pull https://review.openstack.org/p/openstack/$GIT_NAME refs/changes/$review
        popd
    done
}

run_devstack() {
    exclaim "Running devstack..."
    cd $PATH_DEVSTACK_SRC
    echo "
MYSQL_PASSWORD=$MYSQL_PASSWORD
RABBIT_PASSWORD=$RABBIT_PASSWORD
SERVICE_TOKEN=$SERVICE_TOKEN
ADMIN_PASSWORD=$ADMIN_PASSWORD
SERVICE_PASSWORD=$SERVICE_PASSWORD" > localrc
    ./stack.sh
}

cmd_install() {
    install_packages_1
    install_devstack
    install_devstack_code
    install_reviews_on_top_of_devstack
    run_devstack
    install_packages_2
}



###############################################################################
# Build
###############################################################################

setup_py() {
    # Calls setup.py in the given directory.
    echo "CD into $1"
    pushd $1
    sudo python setup.py develop
    popd
}

cmd_build() {
    # Run setup.py for all projects.
    exclaim "Calling setup for all dependencies..."
    setup_py $PATH_NOVA
    setup_py $PATH_PYTHON_NOVACLIENT
    setup_py $PATH_PYTHON_REDDWARFCLIENT
    setup_py $PATH_REDDWARF
}


###############################################################################
# Run Unit Tests
###############################################################################

cmd_unit_tests() {
    exclaim "Running Reddwarf Unit Tests..."
    $PATH_REDDWARF/run_tests.sh -N
}

###############################################################################
# Start various OpenStack daemons interactively in a screen session
###############################################################################

cmd_start_deps() {
    cd $PATH_DEVSTACK_SRC
    ./rejoin-stack.sh
}

cmd_stop_deps() {
    cd $PATH_DEVSTACK_SRC
    screen -S stack -X quit
    rm *.pid*
}


###############################################################################
# Initialize Reddwarf
###############################################################################

fix_rd_configfile() {
    cd $PATH_REDDWARF
    cp etc/reddwarf/reddwarf.conf.sample /tmp
    # Do some munging to get it a-working
    sed -i.bak "s/reddwarf_tenant_id=.*/reddwarf_tenant_id=$REDDWARF_TENANT/g" /tmp/reddwarf.conf.sample
}

rd_manage() {
    cd $PATH_REDDWARF
    bin/reddwarf-manage --config-file=/tmp/reddwarf.conf.sample $@
}

cmd_initialize() {
    exclaim 'Initializing...'

    #run_devstack
    mkdir -p $PATH_INTEGRATION_CONF

    exclaim "Creating Keystone users..."
    configure_keystone
    
    exclaim "Making a temporary reddwarf config file..."
    fix_rd_configfile

    exclaim "Initializing the Reddwarf Database..."
    rd_manage db_sync
}

###############################################################################
# Start Reddwarf specific daemons interactively in a screen session
###############################################################################

function screen_it {
    echo "Starting $@..."
    screen -S reddwarf -X screen -t $1
    screen -S reddwarf -p $1 -X stuff "$2$NL"
}

cmd_start() {
    if [ ! -f ~/.screenrc ]; then
    cat >~/.screenrc <<EOF
hardstatus on
hardstatus alwayslastline
hardstatus string "%{.bW}%-w%{.rW}%n %t%{-}%+w %=%{..G}%H %{..Y}%d/%m %c"

defscrollback 1024

vbell off
startup_message off
EOF
    fi

    NL=`echo -ne '\015'`

    screen -d -m -S reddwarf -t reddwarf
    sleep 1

    screen_it reddwarf "cd $PATH_REDDWARF; bin/reddwarf-server --config-file=/tmp/reddwarf.conf.sample"
    screen -S reddwarf -x
}

###############################################################################
# Stop any active Reddwarf screen session
###############################################################################
###############################################################################

cmd_stop() {
    screen -S reddwarf -X quit
    rm *.pid*
}


###############################################################################
# Run Integration Tests
###############################################################################

cmd_unit_tests() {
    exclaim "Running Reddwarf Integration Tests..."
    export PYTHONPATH=$PYTHONPATH:$PATH_REDDWARF:$PATH_REDDWARF_INT_TESTS
    python $INT_TEST_OPTIONS -B $PATH_REDDWARF_INT_TESTS/int_tests.py  --verbose --verbose $*
    $PATH_REDDWARF/run_tests.sh -N
}


###############################################################################
# Process the user provided command and run the appropriate command
###############################################################################

# Lets not run this as the root user
if [ $EUID -eq 0 ]; then
   echo "You are running this script as root. You need to run as a regular user"
   exit 1
fi

# Set this to exit immediately on error
set -o errexit

set_home_dir
set_http_proxy

print_usage() {
    echo "Usage: $0 [command]"
    echo "
    Commands :
          install         - Install all the required dependencies
          initialize      - Cleans nova database, sets everything up.
          build           - Build the packages (including the agent)
          unit-tests      - Run the unit tests.
          start-deps      - Start or resume daemons Reddwarf depends on.
          stop-deps       - Kill daemons Reddwarf depends on.
          initialize      - Sets up Reddwarf database.
          start           - Start or resume daemons Reddwarf depends on.
          stop            - Kill daemons Reddwarf depends on.
    "
    exit 1
}

# Print the available commands
if [ $# -lt 1 ]; then
    print_usage
fi

case "$1" in
    "install" ) cmd_install;;
    "build" ) cmd_build;;
    "unit-tests" ) cmd_unit_tests;;
    "initialize" ) cmd_initialize;;
    "start-deps" ) cmd_start_deps;;
    "stop-deps" ) cmd_stop_deps;;
    "start" ) cmd_start;;
    "stop" ) cmd_stop;;
    * )
        echo "'$1' not a valid command"
        exit 1
esac
